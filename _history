{"entries":[{"timestamp":1744502321219,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let mag: number;\nlet left: number;\nlet front: number;\nlet right: number;\n// #####FUNCTIONS######\n// magnet checking function\nfunction magnet_detect(): number {\n    let mag = 0\n    let magY = input.magneticForce(Dimension.Y)\n    let magX = input.magneticForce(Dimension.X)\n    let magZ = input.magneticForce(Dimension.Z)\n    //  take the distance so you can sense in any direction\n    let force = Math.pow(magX * magX + magY * magY + magZ * magZ, .5)\n    if (force >= 500) {\n        mag = 1\n        //  turn headlights green\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x00ff00)\n    }\n    \n    return mag\n}\n\n// # BACKGROUND MUSIC\nfunction missionImpossibleMusic(bpm: number) {\n    music.play(music.stringPlayable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"Fb4 Fb4 F4 F4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"Fb4 Fb4 F4 F4\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"A6 G6 D5 D5 D5 D5 D5 D5 - -\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"A6 G6 Db5 Db5 Db5 Db5 Db5 Db5 - -\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"A6 G6 C5 C5 C5 C5 C5 C5 - -\", bpm), music.PlaybackMode.UntilDone)\n    music.play(music.stringPlayable(\"Bb4 C5 - -\", bpm), music.PlaybackMode.UntilDone)\n}\n\n//  make music play in background\n// # DIRECTION CORRECTION FUNCTIONS\nfunction straighten_to_line() {\n    let speed: number;\n    // keep counter to break while loop\n    let count = 0\n    let error = CutebotPro.getOffset()\n    //  turn on headlights(pink = 247, 25, 236)\n    CutebotPro.singleHeadlights(CutebotProRGBLight.RGBL, 247, 25, 236)\n    CutebotPro.singleHeadlights(CutebotProRGBLight.RGBR, 247, 25, 236)\n    // keep turning till we are straight\n    while (Math.abs(error) > 0 && count < 15) {\n        //  update count of while loop iterations so we can prevent getting stuck\n        count = count + 1\n        // get offset\n        error = CutebotPro.getOffset()\n        //  set turn speed\n        speed = 50 + Math.abs(error) / 3000 * 50\n        //  turn right\n        if (error > 0) {\n            // turn on right headlight(blue = 51, 255, 252)\n            CutebotPro.singleHeadlights(CutebotProRGBLight.RGBR, 51, 255, 252)\n            CutebotPro.pwmCruiseControl(speed, 0)\n            basic.pause(30)\n        } else if (error < 0) {\n            //  turn left\n            // turn on left headlight(blue = 51, 255, 252)\n            CutebotPro.singleHeadlights(CutebotProRGBLight.RGBL, 51, 255, 252)\n            CutebotPro.pwmCruiseControl(speed * -1, 0)\n            basic.pause(30)\n        }\n        \n        //  turn off headlights\n        CutebotPro.turnOffAllHeadlights()\n        CutebotPro.pwmCruiseControl(0, 0)\n        basic.pause(50)\n        error = CutebotPro.getOffset()\n    }\n}\n\nfunction detect_line(): number {\n    //  get the line tracking offset\n    let error = CutebotPro.getOffset()\n    let line = 0\n    //  detects black line\n    if (Math.abs(error) < 3000) {\n        CutebotPro.pwmCruiseControl(0, 0)\n        basic.pause(100)\n        straighten_to_line()\n        line = 1\n    }\n    \n    return line\n}\n\n// turns for line following\nfunction turn_r() {\n    \n    lwheel = lwheel + Math.abs(error) / 3000 * maxturnspeed\n    rwheel = rwheel - Math.abs(error) / 3000 * maxturnspeed\n    //  Set the change\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    // delay 0.05 sec\n    // delay 0.01 sec\n    basic.pause(10)\n}\n\nfunction turn_l() {\n    \n    lwheel = lwheel - Math.abs(error) / 3000 * maxturnspeed\n    rwheel = rwheel + Math.abs(error) / 3000 * maxturnspeed\n    //  Set the change\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    // delay 0.05 sec\n    // delay 0.01 sec\n    basic.pause(10)\n}\n\nfunction follow_line() {\n    \n    //  get the line offset\n    error = CutebotPro.getOffset()\n    //  make the left side of line the center\n    //  error = error + 1000\n    //  if detects no line\n    if (Math.abs(error) == 3000) {\n        lwheel = 0\n        rwheel = 0\n        // turn on both headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff0000)\n    }\n    \n    //  if detects a big line\n    // ### Intersection ####\n    //  if detects a big line (error is less than 100)\n    if (Math.abs(error) < 100) {\n        if (error > 0) {\n            //  robot is to the left of intersection (make a big right turn)\n            error = 3000 / error\n            turn_r()\n            basic.pause(100)\n            // yellow light\n            CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xffff00)\n        } else if (error < 0) {\n            //  robot is to the right of intersection (make a big left turn)\n            error = 3000 / error\n            turn_l()\n            basic.pause(100)\n            // yellow light\n            CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xffff00)\n        }\n        \n    }\n    \n    //  too far left\n    if (error > 0) {\n        turn_r()\n        //  turn on left headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff0000)\n    }\n    \n    //  too far right\n    if (error < 0) {\n        turn_l()\n        // turn on right headlight (red)\n        CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff0000)\n    }\n    \n    //  reset speed and headlights\n    CutebotPro.turnOffAllHeadlights()\n    lwheel = 10\n    rwheel = 10\n    CutebotPro.pwmCruiseControl(lwheel, rwheel)\n    basic.pause(5)\n}\n\n//  function for checking if wall is too close and backing up:\nfunction check_if_too_close() {\n    let sonar = CutebotPro.ultrasonic(SonarUnit.Centimeters)\n    if (sonar < 5) {\n        // check what is too close\n        //  move back 5 cm\n        CutebotPro.distanceRunning(CutebotProOrientation.Retreat, 5, CutebotProDistanceUnits.Cm)\n    }\n    \n}\n\n// ##functions for turning and moving forward\nfunction check_distance(): number {\n    check_if_too_close()\n    return CutebotPro.ultrasonic(SonarUnit.Centimeters)\n}\n\nfunction turn_left() {\n    CutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, 90)\n    basic.pause(100)\n}\n\nfunction turn_right() {\n    CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, 90)\n    basic.pause(100)\n}\n\nfunction move_forward() {\n    CutebotPro.pwmCruiseControl(20, 20)\n    let line_found = 0\n    while (line_found == 0) {\n        line_found = detect_line()\n    }\n    CutebotPro.distanceRunning(CutebotProOrientation.Advance, 15.35, CutebotProDistanceUnits.Cm)\n    basic.pause(100)\n}\n\n// # TRANSMISSION\nfunction on_button_pressed_a() {\n    basic.pause(1000)\n    for (let i = 0; i < path.length; i++) {\n        radio.sendValue(\"step\", path[i])\n        basic.pause(700)\n    }\n}\n\n//  Small delay for good transmission\n// # CELEBRATE\nfunction total(bpm: number) {\n    CutebotPro.pwmCruiseControl(0, 100)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff0000)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x7f00ff)\n    music.play(music.stringPlayable(\"C\", bpm), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff8000)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x007fff)\n    music.play(music.stringPlayable(\"C\", bpm), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xffff00)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x00ff00)\n    music.play(music.stringPlayable(\"C\", bpm), music.PlaybackMode.UntilDone)\n    CutebotPro.pwmCruiseControl(100, 0)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ff00)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xffff00)\n    music.play(music.stringPlayable(\"C\", bpm * 2), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ffff)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff8000)\n    music.play(music.stringPlayable(\"C5\", bpm * 2), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x007fff)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff0000)\n    music.play(music.stringPlayable(\"F\", bpm), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x7f00ff)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff00ff)\n    music.play(music.stringPlayable(\"F\", bpm), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff00ff)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x00ff00)\n    CutebotPro.pwmCruiseControl(0, 100)\n    music.play(music.stringPlayable(\"E\", bpm * 2), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ff00)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff00ff)\n    CutebotPro.pwmCruiseControl(100, 0)\n    music.play(music.stringPlayable(\"A\", bpm * 2), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0xff00ff)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0x00ff00)\n    CutebotPro.pwmCruiseControl(0, 100)\n    music.play(music.stringPlayable(\"E\", bpm * 2), music.PlaybackMode.UntilDone)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBL, 0x00ff00)\n    CutebotPro.colorLight(CutebotProRGBLight.RGBR, 0xff00ff)\n    CutebotPro.pwmCruiseControl(100, 0)\n    music.play(music.stringPlayable(\"A\", bpm * 2), music.PlaybackMode.UntilDone)\n}\n\n// ##### MAIN CODE ######\ncontrol.inBackground(function onIn_background() {\n    music.setVolume(100)\n    missionImpossibleMusic(350)\n    \n})\n// # LINE FOLLOWING\n// set variables\nlet lwheel = 20\nlet rwheel = 20\nlet error = 0\nlet maxturnspeed = 50\n//  set starting speed\nCutebotPro.pwmCruiseControl(lwheel, rwheel)\nbasic.pause(50)\n// Run line follow till magnet detected then stop\nwhile (magnet_detect() == 0) {\n    follow_line()\n}\n// stop robot\nCutebotPro.pwmCruiseControl(0, 0)\nbasic.pause(100)\nCutebotPro.turnOffAllHeadlights()\n// # START MAZE\n//  be square with maze:\nCutebotPro.trolleySteering(CutebotProTurn.LeftInPlace, 90)\nCutebotPro.distanceRunning(CutebotProOrientation.Advance, 15.35, CutebotProDistanceUnits.Cm)\n// originate maze matrix and depth first search variables\n// N = 5\n// M = 6\n// field = []\n// for j in range(N):\n// row = []\n// for i in range(M):\n// row.append(0)\n// field.append(row)\nlet grid_type : number[] = []\n// Java script, defines array as an integer array\nlet intersection : number[] = []\n// originate empty path taken\nlet path : number[] = []\nlet first_move_done = false\nlet maze_exit = false\nlet magnet_count = 1\n// maze navigation before exit magnet is located\nwhile (magnet_count < 3) {\n    mag = magnet_detect()\n    // magnet found\n    if (mag == 1) {\n        magnet_count += 1\n        // magnet inside maze located\n        if (magnet_count == 2) {\n            path.push(4)\n        }\n        \n    }\n    \n    // end mazed navigation\n    if (magnet_count == 3) {\n        maze_exit = true\n    } else {\n        // continue maze navigation\n        //  Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n        if (left > 16) {\n            move_forward()\n            path.push(2)\n        } else {\n            //  Look forward\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if (front > 16) {\n                move_forward()\n                path.push(1)\n            } else {\n                //  Look right\n                turn_right()\n                right = check_distance()\n                basic.pause(100)\n                if (right > 16) {\n                    move_forward()\n                    path.push(3)\n                } else {\n                    //  Dead end\n                    turn_right()\n                    move_forward()\n                    path.push(0)\n                }\n                \n            }\n            \n        }\n        \n    }\n    \n}\ntotal(130)"],[0,"\n"]],"start1":0,"start2":0,"length1":12121,"length2":1}]},{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"######FUNCTIONS######\n#magnet checking function\n\ndef magnet_detect():\n    mag = 0\n    magY = input.magnetic_force(Dimension.Y)\n    magX = input.magnetic_force(Dimension.X)\n    magZ = input.magnetic_force(Dimension.Z)\n    # take the distance so you can sense in any direction\n    force = Math.pow((magX*magX + magY*magY + magZ*magZ), .5)\n    if force >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n    return mag\n\n## BACKGROUND MUSIC\ndef missionImpossibleMusic(bpm):\n    music.play(music.string_playable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Fb4 Fb4 F4 F4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Fb4 Fb4 F4 F4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 D5 D5 D5 D5 D5 D5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 Db5 Db5 Db5 Db5 Db5 Db5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 C5 C5 C5 C5 C5 C5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Bb4 C5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n\n# make music play in background\ndef onIn_background():\n    music.set_volume(100)\n    missionImpossibleMusic(350)\n    pass\n\n## DIRECTION CORRECTION FUNCTIONS\ndef straighten_to_line():\n    #keep counter to break while loop\n    count = 0\n    error = CutebotPro.get_offset()\n\n    # turn on headlights(pink = 247, 25, 236)\n    CutebotPro.single_headlights(CutebotProRGBLight.RGBL, 247, 25, 236)\n    CutebotPro.single_headlights(CutebotProRGBLight.RGBR, 247, 25, 236)\n    #keep turning till we are straight\n    while(abs(error) > 0 and count < 15):\n        # update count of while loop iterations so we can prevent getting stuck\n        count = count + 1\n        #get offset\n        error = CutebotPro.get_offset()\n        # set turn speed\n        speed = 50 + (abs(error)/3000)*50\n        # turn right\n        if error > 0:\n            #turn on right headlight(blue = 51, 255, 252)\n            CutebotPro.single_headlights(CutebotProRGBLight.RGBR, 51, 255, 252)\n            CutebotPro.pwm_cruise_control(speed, 0)\n            basic.pause(30)\n            # turn left\n        elif error < 0:\n            #turn on left headlight(blue = 51, 255, 252)\n            CutebotPro.single_headlights(CutebotProRGBLight.RGBL, 51, 255, 252)\n            CutebotPro.pwm_cruise_control(speed*-1, 0)\n            basic.pause(30)\n        # turn off headlights\n        CutebotPro.turn_off_all_headlights()\n        CutebotPro.pwm_cruise_control(0, 0)\n        basic.pause(50)\n        error = CutebotPro.get_offset()\n\ndef detect_line():\n    # get the line tracking offset\n    error = CutebotPro.get_offset()\n    line = 0\n    # detects black line\n    if abs(error) < 3000:\n        CutebotPro.pwm_cruise_control(0, 0)\n        basic.pause(100)\n        straighten_to_line()\n        line = 1\n    return line\n\n#turns for line following\ndef turn_r():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_l():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\n\ndef follow_line():\n    global lwheel, rwheel, error\n \n    # get the line offset\n    error = CutebotPro.get_offset()\n \n    # make the left side of line the center\n    # error = error + 1000\n \n    # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_r()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_l()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n\n     # too far left\n    if error > 0:\n        turn_r()\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_l()\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n    # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n\n    # function for checking if wall is too close and backing up:\ndef check_if_too_close():\n    sonar = CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n    if sonar < 5: #check what is too close\n        # move back 5 cm\n        CutebotPro.distance_running(CutebotProOrientation.RETREAT, 5, CutebotProDistanceUnits.CM)\n\n###functions for turning and moving forward\ndef check_distance():\n    check_if_too_close()\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 90)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 90)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.pwm_cruise_control(20, 20)\n    line_found = 0\n    while line_found == 0:\n        line_found = detect_line()\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n## TRANSMISSION\ndef on_button_pressed_a():\n    basic.pause(1000)\n    for i in range(len(path)):\n        radio.send_value(\"step\", path[i])\n        basic.pause(700)  # Small delay for good transmission\n\n## CELEBRATE\ndef total(bpm):\n   CutebotPro.pwm_cruise_control(0,100)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x7f00ff)\n   music.play(music.string_playable(\"C\", bpm),\n                music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff8000)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x007fff)\n   music.play(music.string_playable(\"C\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   music.play(music.string_playable(\"C\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.pwm_cruise_control(100,0)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n   music.play(music.string_playable(\"C\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ffff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff8000)\n   music.play(music.string_playable(\"C5\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x007fff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n   music.play(music.string_playable(\"F\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x7f00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   music.play(music.string_playable(\"F\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   CutebotPro.pwm_cruise_control(0,100)\n   music.play(music.string_playable(\"E\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   CutebotPro.pwm_cruise_control(100,0)\n   music.play(music.string_playable(\"A\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   CutebotPro.pwm_cruise_control(0,100)\n   music.play(music.string_playable(\"E\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   CutebotPro.pwm_cruise_control(100,0)\n   music.play(music.string_playable(\"A\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   \n###### MAIN CODE ######\ncontrol.in_background(onIn_background)\n\n## LINE FOLLOWING\n#set variables\nlwheel = 20\nrwheel = 20\nerror = 0\nmaxturnspeed = 50\n\n# set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n\n#Run line follow till magnet detected then stop\n\nwhile (magnet_detect() == 0):\n   follow_line()\n#stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()\n\n\n## START MAZE\n# be square with maze:\nCutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 90)\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\n\n#originate maze matrix and depth first search variables\n#N = 5\n#M = 6\n#field = []\n#for j in range(N):\n    #row = []\n    #for i in range(M):\n        #row.append(0)\n    #field.append(row)\n\ngrid_type: List[number] = [] #Java script, defines array as an integer array\nintersection: List[number] = []\n\n\n#originate empty path taken\npath: List[number] = []\nfirst_move_done = False\nmaze_exit = False\nmagnet_count = 1\n\n#maze navigation before exit magnet is located\nwhile magnet_count < 3:\n    mag = magnet_detect()\n    #magnet found\n    if mag == 1:\n       magnet_count+=1\n       #magnet inside maze located\n       if magnet_count == 2:\n           path.append(4)\n    \n    #end mazed navigation\n    if magnet_count == 3:\n        maze_exit = True\n\n    #continue maze navigation\n    else:\n    # Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n        if left > 16:\n            move_forward()\n            path.append(2)\n        else:\n        # Look forward\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if front > 16:\n                move_forward()\n                path.append(1)\n            else:\n            # Look right\n                turn_right()\n                right = check_distance()\n                basic.pause(100)\n                if right > 16:\n                    move_forward()\n                    path.append(3)\n                else:\n                    # Dead end\n                    turn_right()\n                    move_forward()\n                    path.append(0)\n\ntotal(130)"],[0,"\n"]],"start1":0,"start2":0,"length1":11746,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\""],[0,"\n   "]],"start1":145,"start2":145,"length1":78,"length2":8},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":233,"start2":233,"length1":52,"length2":8},{"diffs":[[0,"on-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":301,"start2":301,"length1":11,"length2":42}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1744502321218,"editorVersion":"7.0.61","text":{"main.ts":"","README.md":"","main.py":"\n","pxt.json":"{\n    \"name\": \"MAZE_ULTIMATE_FORM\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"preferredEditor\": \"pyprj\",\n    \"languageRestriction\": \"python-only\",\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744502782943}